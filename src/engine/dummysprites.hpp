#pragma once

#include <core/image/image.hpp>

namespace eXl
{
  namespace DummySprites
  {
    const uint8_t floorTile[] =
    {
      128, 128, 192, 128, 128, 192, 128, 128,
      128, 128, 192, 128, 128, 192, 128, 128,
      192, 192, 192, 192, 192, 192, 192, 192,
      128, 128, 192, 128, 128, 192, 128, 128,
      128, 128, 192, 128, 128, 192, 128, 128,
      192, 192, 192, 192, 192, 192, 192, 192,
      128, 128, 192, 128, 128, 192, 128, 128,
      128, 128, 192, 128, 128, 192, 128, 128,
    };

    const uint8_t floorBorder[] =
    {
      128, 128, 192, 128, 128, 192, 255, 255,
      128, 128, 192, 128, 128, 192, 255, 255,
      192, 192, 192, 192, 192, 192, 255, 255,
      128, 128, 192, 128, 128, 192, 255, 255,
      128, 128, 192, 128, 128, 192, 255, 255,
      192, 192, 192, 192, 192, 192, 255, 255,
      128, 128, 192, 128, 128, 192, 255, 255,
      128, 128, 192, 128, 128, 192, 255, 255,
    };

    const uint8_t floorIntCorner[] =
    {
      128, 128, 192, 128, 128, 192, 255, 255,
      128, 128, 192, 128, 128, 192, 255, 255,
      192, 192, 192, 192, 192, 192, 255, 255,
      128, 128, 192, 128, 128, 192, 255, 255,
      128, 128, 192, 128, 128, 192, 255, 255,
      192, 192, 192, 192, 192, 192, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255,
    };

    const uint8_t floorExtCorner[] =
    {
      128, 128, 192, 128, 128, 192, 128, 128,
      128, 128, 192, 128, 128, 192, 128, 128,
      192, 192, 192, 192, 192, 192, 192, 192,
      128, 128, 192, 128, 128, 192, 128, 128,
      128, 128, 192, 128, 128, 192, 128, 128,
      192, 192, 192, 192, 192, 192, 192, 192,
      128, 128, 192, 128, 128, 192, 255, 255,
      128, 128, 192, 128, 128, 192, 255, 255,
    };

    const uint8_t wall[] =
    {
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    };

    const uint8_t fill[] =
    {
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    };

    const uint8_t intCorner[] =
    {
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    };

    const uint8_t extCorner[] =
    {
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128,
    };

    const uint8_t dummyChar[] =
    {
      0,   0,   0,   0,   0,   0,   0,   0,
      0, 255,   0,   0,   0,   0, 255,   0,
      0,   0, 255,   0,   0, 255,   0,   0,
      0,   0,   0, 255, 255,   0,   0,   0,
      0,   0,   0, 255, 255,   0,   0,   0,
      0,   0, 255,   0,   0, 255,   0,   0,
      0, 255,   0,   0,   0,   0, 255,   0,
      0,   0,   0,   0,   0,   0,   0,   0
    };

    const uint8_t dummyWhite[] =
    {
      255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255,
      255, 255, 255, 255, 255, 255, 255, 255
    };

    inline Image BitmapToImage(uint8_t const* iBitmap, Image::Size iImageSize)
    {
      Image::Size const dummySize(8, 8);

      uint32_t numPixels = iImageSize.x * iImageSize.y;
      uint8_t* imageData = (uint8_t*)eXl_ALLOC(numPixels * 4 * sizeof(uint8_t));

      uint8_t* curPixel = imageData;
      for (uint32_t y = 0; y < iImageSize.y; ++y)
      {
        uint32_t srcY = y % dummySize.y;
        for (uint32_t x = 0; x < iImageSize.x; ++x)
        {
          uint32_t srcX = x % dummySize.x;
          uint32_t srcOffset = srcX + srcY * dummySize.x;
          uint8_t intensity = (iBitmap[srcOffset] & 127) << 1;
          uint8_t alphaValue = iBitmap[srcOffset] & 128 ? 255 : 0;

          curPixel[0] = curPixel[1] = curPixel[2] = intensity;
          curPixel[3] = alphaValue;

          curPixel += 4;
        }
      }

      return Image(imageData, iImageSize, Image::RGBA, Image::Char, Image::Adopt);
    }
  }
}