char const* specularMapPS = 
//"#version 140\n"
#ifdef __ANDROID__
"precision mediump float;\n"
#endif

"#define M_PI 3.1415926535897932384626433832795\n"
"varying vec2 texCoord;\n"
"uniform samplerCube iSkyBox;\n"
//"uniform sampler2D   iPreviousValue;\n"
"uniform int iCubeFace;\n"
"uniform vec3 iPhiComputationRange;\n"
"uniform vec3 iThetaComputationRange;\n"
"\n"

#include "oglGGXutils.inl"

"#define SamplesCount 1024\n"

"vec3 PrefilterEnvMap( float roughness, vec3 R )\n"
"{\n"
"  float TotalWeight = 0;\n"
"  vec3 N = R;\n"
"  vec3 V = R;\n"
"  float dotUp = abs(dot(R, vec3(1,0,0)));\n"
"  vec3 side = lerp(vec3(1,0,0), vec3(0,1,0), step(0.98, dotUp));\n"
"  vec3 up = normalize(cross( N, side));\n"
"  side = normalize(cross(up, N));\n"

"  vec3 PrefilteredColor = 0;\n"
"  for( uint i = 0; i < SamplesCount; i++ )\n"
"  {\n"
"    vec3 sampleVector = GenerateGGXsampleVector(i, SamplesCount, roughness, side, up, R);\n"
"    vec3 L = 2 * dot( V, sampleVector ) * sampleVector - V;\n"
"    float NoL = saturate( dot( N, L ) );\n"
"    if( NoL > 0 )\n"
"    {\n"
"      PrefilteredColor += texture(iSkyBox, L).rgb * NoL;\n"
"      TotalWeight += NoL;\n"
"    }\n"
"  }\n"
"  return PrefilteredColor / TotalWeight;\n"
"}\n"

"void main()\n"
"{\n"
"  vec3 normal;\n"
//"  vec3 up;\n"
//"  vec3 right;\n"
"  if(iCubeFace == 4)\n"
"  {\n"
"    normal = normalize(vec3(texCoord.x, texCoord.y, 1));\n"   
"  }\n"
"  else if(iCubeFace==2)\n"
"    normal = normalize( vec3(texCoord.x,  1, -texCoord.y) );\n"
"  else if(iCubeFace==3)\n"
"    normal = normalize( vec3(texCoord.x, -1,  texCoord.y) );\n"
"  else if(iCubeFace==0)\n"
"    normal = normalize( vec3(  1, texCoord.y,-texCoord.x) );\n"
"  else if(iCubeFace==1)\n"
"    normal = normalize( vec3( -1, texCoord.y, texCoord.x) );\n"
"  else if(iCubeFace==5)\n"
"    normal = normalize( vec3(-texCoord.x, texCoord.y, -1) );\n"
"  \n"
//"  gl_FragColor = vec4(abs((normal.xyz + 1.0) / 2.0), 1.0);\n"
//"  gl_FragColor = vec4(texCoord.xy / 2.0 + 0.5, 0.0, 1.0);\n"

"  gl_FragColor = vec4(PrefilterEnvMap(iPhiComputationRange.x, normal), 1.0);\n"

"}\n"
;

char const* envBrdfMapPS = 
//"#version 140\n"
#ifdef __ANDROID__
"precision mediump float;\n"
#endif

"#define M_PI 3.1415926535897932384626433832795\n"
"varying vec2 texCoord;\n"
"uniform samplerCube iSkyBox;\n"
//"uniform sampler2D   iPreviousValue;\n"
"uniform int iCubeFace;\n"
"uniform vec3 iPhiComputationRange;\n"
"uniform vec3 iThetaComputationRange;\n"
"\n"

#include "oglGGXutils.inl"

"#define SamplesCount 1024\n"
"vec2 IntegrateBRDF( float roughness, float NoV )\n"
"{\n"
"  vec3 V;\n"
"  V.x = sqrt( 1.0f - NoV * NoV ); // sin\n"
"  V.y = 0;\n"
"  V.z = NoV; // cos\n"
"  float A = 0;\n"
"  float B = 0;\n"
"  const uint NumSamples = 1024;\n"
"  float dotUp = abs(dot(V, vec3(1,0,0)));\n"
"  vec3 side = lerp(vec3(1,0,0), vec3(0,1,0), step(0.98, dotUp));\n"
"  vec3 up = normalize(cross( V, side));\n"
"  side = normalize(cross(up, V));\n"
"  for( uint i = 0; i < NumSamples; i++ )\n"
"  {\n"
"    vec3 sampleVector = GenerateGGXsampleVector(i, SamplesCount, roughness, side, up, V);\n"
"    vec3 L = 2 * dot( V, sampleVector ) * sampleVector - V;\n"
"    float NoL = saturate( L.z );\n"
"    float NoH = saturate( sampleVector.z );\n"
"    float VoH = saturate( dot( V, sampleVector ) );\n"
"    if( NoL > 0 )\n"
"    {\n"
"      float G = G_Smith(V, sampleVector, V, roughness);\n"
"      float G_Vis = G * G * VoH / (NoH * NoV);\n"
"      float Fc = pow( 1 - VoH, 5 );\n"
"      A += (1 - Fc) * G_Vis;\n"
"      B += Fc * G_Vis;\n"
"    }\n"
"  }\n"
"  return vec2( A, B ) / NumSamples;\n"
"}\n"


"void main()\n"
"{\n"
"  float roughness = (texCoord.x + 1.0) / 2.0;\n"
"  float NoV = (texCoord.y + 1.0) / 2.0;\n"
"  gl_FragColor = vec4(IntegrateBRDF(roughness, NoV), 0.0, 1.0);\n"

"}\n"
;